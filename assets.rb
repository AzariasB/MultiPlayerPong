#! /usr/bin/ruby
require 'builder'

HPP_TEMPLATE =  %{
/*
 * The MIT License
 *
 * Copyright 2017 azarias.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*
 * File:   Assets.hpp
 * Author: azarias
 *
 * Created on 21/5/2018
 */
/*
 * This file is automatically generated
 * All modifications done to this file may be lost
 */

#pragma once

#include <unordered_map>

namespace mp{

class Assets
{
public:
  #CONTENT

private:
    Assets();

};

}
}

CPP_TEMPLATE = %{

/*
 * The MIT License
 *
 * Copyright 2017 azarias.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*
 * File:   Assets.cpp
 * Author: azarias
 *
 * Created on 21/5/2018
 */
/*
 * This file is automatically generated
 * All modifications done to this file may be lost
 */

#include "Assets.hpp"

namespace mp{
#CONTENT
}

}

class String
  def camel_case
    split('_').map{|e| e.capitalize}.join
  end
end

def parseFolder(folder, dic)

  Dir.foreach(folder) do |file|
    next if file == ".." or file == "."

    fullFile = "#{folder}/#{file}"

    if File.file?(fullFile)
      short = File.basename(folder)

      dic[short] = [] if not dic[short]

      dic[short] << file
    elsif File.directory?(fullFile)
      parseFolder(fullFile, dic)
    end
  end

  return dic
end

def build_rcc(files)
  xml = Builder::XmlMarkup.new( :indent => 2 )
  xml.instruct! :xml, :encoding => "UTF-8"
  xml.RCC do |p|
    files.each do |k,v|
      p.qresource("prefix" => "/#{k}") do |res|
        v.each do |f_name|
          res.file("res/#{k}/#{f_name}", "alias" => f_name.downcase())
        end
      end
    end
  end
end

def build_cpp(files)
  content = ""
  res = ""
  counter = 0
  files.each do |k,v|
    c_case = k.camel_case
    enum_val = v.map{|x| File.basename(x, ".*").camel_case + " = #{counter+=1}"}
    res += %{
    enum #{c_case} {#{enum_val*", "}};
    static const std::unordered_map<#{c_case}, std::string> #{k};
}
    init = v.map{|x|
      name = File.basename(x, ".*").camel_case
      "{ #{name}, \":/#{k}/#{x.downcase}\" }"
    }

    content += %{
const std::unordered_map<Assets::#{c_case}, std::string> Assets::#{k} = {\n#{init*",\n"}\n};
}
  end
  [res, content]
end

res = parseFolder("#{Dir.pwd}/res", {})
rcc = build_rcc(res)
puts rcc
File.write("resources.qrc", build_rcc(res))
cpp = build_cpp(res)

File.write("src/client/Assets.hpp", HPP_TEMPLATE.gsub("#CONTENT", cpp[0]))
File.write("src/client/Assets.cpp", CPP_TEMPLATE.gsub("#CONTENT", cpp[1]))